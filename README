Getting started:
================

to be able to build tachyon, you will at least need matching
binutils and a compiler. any more or less resent (>4.0) gcc
should do, and any binutils working with it.

only a 64 bit toolchain is required, as this is used to build
the 32 bit kernel too.

binutils:
    ./configure --prefix=/opt/ttc2 --target=x86_64-pc-elf
    make
    make install

possibly install gmp, mpfr, mpc. all of them just need
./configure --prefix=/opt/ttc2; make; make install;
mpc needs --with-mpfr=/opt/ttc2 and (IIRC)--with-gmp=/opt/ttc2 
additionally.

gcc:
    ./configure --prefix=/opt/ttc2 --with-gnu-ld --with-gnu-as \
        --with-mpfr=/opt/ttc2 \ # only if required!
        --with-gmp=/opt/ttc2 \  # only if required!
        --with-mpc=/opt/ttc2    # only if required!
    make all-gcc
    make install-gcc

Setup your PATH, to have the now ready toolchain in it. Then
you can now do any of the following:

    make                    # build default arch (x86_64)
    make all-archs          # build all supported ARCHs
    make ARCH=x86           # build 32 bit. NOTE: all the following
                              rules can take the ARCH switch too, to
                              operate on the 32 bit kernel!

    make clean              # remove build directory (removes all
                              generated files, iso images, etc.
    make iso                # build iso image for the current ARCH
    make all-archs-iso      # build iso image for all ARCHs
    
    make qemu               # run kernel directly in qemu (must be installed)
    make qemu-dbg           # same as above, but run GDB remote stub on :1234
    make gdb                # attach a debugger to the above debugable qemu

    make qemu-netboot       # netboot with qemu builtin ROM, needs qemu with gPXE ROM
    make qemu-netboot-dbg   # same as above, attach debugger with make gdb
    make qemu-netboot-grub2 # use GRUB2 (must be installed) to netboot.
    make qemu-netboot-grub2-dbg # same as above, debug with make gdb
    make qemu-cd            # boot kernel from GRUB2 cd.
    make qemu-cd-dbg        # same as above but with debugger, run make gdb to debug

    make bochs-cd           # boot with bochs from GRUB2 cd (bochs must be installed)
